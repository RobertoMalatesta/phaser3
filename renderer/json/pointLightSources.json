{
	"comment": [
		"// based on code by Olivier de Schaetzen (citiral), posted on www.shadertoy.com"
		],

	"fragment": [
		" precision lowp float;",
		" ",
		" #define STEPS 128",
		" #define STEPS2 64",
		" #define LIGHT_TINT vec3(0.6, 0.6, 0.6)",
		" #define LIGHT_POWER 0.05",
		" #define AMBIENT_LIGHT vec4(0.2, 0.2, 0.5, 1.0)",
		" ",
		" varying mediump vec2 v_texcoord;",
		" uniform sampler2D uImageSampler;",
		" uniform float uLightPosX;",
		" uniform float uLightPosY;",
		" ",
		" bool blocked(vec2 p)",
		" {",
		"//   return ( texture2D(uImageSampler, p).a > 0.1 );",
		"   return ( texture2D(uImageSampler, p).rgb != vec3(0.0, 0.0, 0.0) );",
		" }",
		" ",
		" vec4 getColor(vec2 p)",
		" {",
		"   vec4 col = texture2D(uImageSampler, p);",
		"//   if ( col.a > 0.1 ) {",
		"   if ( col.rgb != vec3(0.0, 0.0, 0.0) ) {",
		"     return col;",
		"   }",
		"   return AMBIENT_LIGHT;",
		" }",
		" ",
		" vec3 getLighting(vec2 p, vec2 lp)",
		" {",
		"   float d = distance(p, lp);",
		"   if (d * 800.0 >= float(STEPS)) {",
		"     vec2 sp = p;",
		"     vec2 v = (lp - p) / float(STEPS);",
		"     for (int i = 0 ; i < STEPS; i++) {",
		"       if ( blocked(sp) ) {",
		"         return vec3(d, d, d) + LIGHT_POWER * LIGHT_TINT / d;",
		"       }",
		"       sp += v;",
		"     }",
		"     return vec3(1.0, 1.0, 1.0) + LIGHT_POWER * LIGHT_TINT / d;",
		"   }",
		"   // distance is less than STEPS, use fewer steps to process faster",
		"   vec2 sp = p;",
		"   vec2 v = (lp - p) / float(STEPS2);",
		"   for (int i = 0 ; i < STEPS2; i++) {",
		"     if ( blocked(sp) ) {",
		"       return vec3(d, d, d) + LIGHT_POWER * LIGHT_TINT / d;",
		"     }",
		"     sp += v;",
		"   }",
		"   return vec3(1.0, 1.0, 1.0) + LIGHT_POWER * LIGHT_TINT / d;",
		" }",
		" ",
		" void main() {",
		"   vec2 lp = vec2(uLightPosX, uLightPosY);",
		"   gl_FragColor = getColor(v_texcoord.xy) * vec4(getLighting(v_texcoord.xy, lp), 1.);",
		" }"
		],

	"vertex": [
    	" attribute vec4 aPosition;",
    	" varying vec2 v_texcoord;",
		" void main() {",
		"   gl_Position = aPosition;",
		"   v_texcoord = aPosition.xy * 0.5 + 0.5;",
		" }"
		],
		
	"attributes":
		[ "aPosition" ],

	"uniforms":
		[ "uLightPosX", "uLightPosY" ],

	"samplers":
		[ "uImageSampler" ]
}
